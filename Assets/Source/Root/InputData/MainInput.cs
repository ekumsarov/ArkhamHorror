//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/Root/InputData/MainInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace EVI.Inputs
{
    public partial class @MainInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInput"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""8fd07597-9e6a-4e12-afe6-7f9164f11009"",
            ""actions"": [
                {
                    ""name"": ""ClickLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f787e048-4e9b-4b6c-9b02-4088f9966dd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CrouchButton"",
                    ""type"": ""Button"",
                    ""id"": ""37fadec8-869e-4da1-89d1-0584339c0f95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNextUnit"",
                    ""type"": ""Button"",
                    ""id"": ""dc99060c-6203-4be4-ac94-88f4b8f5b58f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Invenory"",
                    ""type"": ""Button"",
                    ""id"": ""66f24a33-5241-4822-bfda-e14d9ab6eaa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""287a9345-b217-40a0-a7d9-ca9e3c5a65d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7f9bc89-5c0c-46ee-a852-bac9441326df"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""ClickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3bcd03e-0c61-471b-9553-e52696cc3a4a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92683588-5410-4944-9df3-7c6cccc4e109"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNextUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14b1e81b-2b39-4477-85d9-cf3a5ab1bb9b"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Invenory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84ab7fad-7a26-416f-b1b9-009ed641e546"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMap"",
            ""id"": ""e5a497c1-9a53-4b92-855e-0935a450d950"",
            ""actions"": [
                {
                    ""name"": ""CameraContol"",
                    ""type"": ""Value"",
                    ""id"": ""7c92c174-242c-462c-965c-e369fcf8fe94"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotate"",
                    ""type"": ""Value"",
                    ""id"": ""7370b18f-fccd-493b-a26f-db84bdac7a76"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""387ca8b4-6dfa-43fb-9274-305fb0763045"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""80f2b4f4-bd61-4f20-b7fc-2e659460aefe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""68803e20-ff91-447d-9634-f6de20f1c54d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a63b23d6-6c92-4b13-bbcc-f03257ab5c7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""66aa2ad9-ae19-492f-aa0b-393732174f39"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraContol"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9004a274-e96c-4990-b47b-f32ec489ee9b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraContol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3f8a1fc0-2321-4268-9cb5-d903988ba11d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraContol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e49f5b6d-399d-4e9d-9385-384d162c625b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraContol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fc86737f-98e4-4fed-bf4b-967994a37e02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraContol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Scroller"",
                    ""id"": ""879f2903-7696-45e0-a06e-f1a049504ddd"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""677399ed-0521-4020-8be9-ac00f57b67bc"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""65a7cf32-6c13-4e6d-b4b2-5fe9474cfb68"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""CTR"",
                    ""id"": ""e56368a3-1f3b-498e-846d-d25f4ae85a9a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""9e748813-2a8c-4a88-9721-5bc1eac7c7d7"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""d65f4343-e9f4-474d-8ed3-94457a9f5863"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""057e662c-cfa2-47ed-b1ee-192d374bafdf"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d9bfaba-60c2-4247-8404-b00745bcabc0"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44592de8-0ab4-4713-b0d5-d41443220843"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31c13c7c-33df-45f6-afb2-e5f6803dbba8"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""521d587f-a7d4-4c9e-aac1-16807f6591bb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb293433-b068-4165-8e08-b50082acdb57"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main"",
            ""bindingGroup"": ""Main"",
            ""devices"": []
        }
    ]
}");
            // MainMap
            m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
            m_MainMap_ClickLeft = m_MainMap.FindAction("ClickLeft", throwIfNotFound: true);
            m_MainMap_CrouchButton = m_MainMap.FindAction("CrouchButton", throwIfNotFound: true);
            m_MainMap_SelectNextUnit = m_MainMap.FindAction("SelectNextUnit", throwIfNotFound: true);
            m_MainMap_Invenory = m_MainMap.FindAction("Invenory", throwIfNotFound: true);
            m_MainMap_PointerPosition = m_MainMap.FindAction("PointerPosition", throwIfNotFound: true);
            // CameraMap
            m_CameraMap = asset.FindActionMap("CameraMap", throwIfNotFound: true);
            m_CameraMap_CameraContol = m_CameraMap.FindAction("CameraContol", throwIfNotFound: true);
            m_CameraMap_CameraRotate = m_CameraMap.FindAction("CameraRotate", throwIfNotFound: true);
            m_CameraMap_Zoom = m_CameraMap.FindAction("Zoom", throwIfNotFound: true);
            m_CameraMap_ZoomOut = m_CameraMap.FindAction("ZoomOut", throwIfNotFound: true);
            m_CameraMap_CameraRotateRight = m_CameraMap.FindAction("CameraRotateRight", throwIfNotFound: true);
            m_CameraMap_CameraRotateLeft = m_CameraMap.FindAction("CameraRotateLeft", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MainMap
        private readonly InputActionMap m_MainMap;
        private List<IMainMapActions> m_MainMapActionsCallbackInterfaces = new List<IMainMapActions>();
        private readonly InputAction m_MainMap_ClickLeft;
        private readonly InputAction m_MainMap_CrouchButton;
        private readonly InputAction m_MainMap_SelectNextUnit;
        private readonly InputAction m_MainMap_Invenory;
        private readonly InputAction m_MainMap_PointerPosition;
        public struct MainMapActions
        {
            private @MainInput m_Wrapper;
            public MainMapActions(@MainInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ClickLeft => m_Wrapper.m_MainMap_ClickLeft;
            public InputAction @CrouchButton => m_Wrapper.m_MainMap_CrouchButton;
            public InputAction @SelectNextUnit => m_Wrapper.m_MainMap_SelectNextUnit;
            public InputAction @Invenory => m_Wrapper.m_MainMap_Invenory;
            public InputAction @PointerPosition => m_Wrapper.m_MainMap_PointerPosition;
            public InputActionMap Get() { return m_Wrapper.m_MainMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
            public void AddCallbacks(IMainMapActions instance)
            {
                if (instance == null || m_Wrapper.m_MainMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainMapActionsCallbackInterfaces.Add(instance);
                @ClickLeft.started += instance.OnClickLeft;
                @ClickLeft.performed += instance.OnClickLeft;
                @ClickLeft.canceled += instance.OnClickLeft;
                @CrouchButton.started += instance.OnCrouchButton;
                @CrouchButton.performed += instance.OnCrouchButton;
                @CrouchButton.canceled += instance.OnCrouchButton;
                @SelectNextUnit.started += instance.OnSelectNextUnit;
                @SelectNextUnit.performed += instance.OnSelectNextUnit;
                @SelectNextUnit.canceled += instance.OnSelectNextUnit;
                @Invenory.started += instance.OnInvenory;
                @Invenory.performed += instance.OnInvenory;
                @Invenory.canceled += instance.OnInvenory;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }

            private void UnregisterCallbacks(IMainMapActions instance)
            {
                @ClickLeft.started -= instance.OnClickLeft;
                @ClickLeft.performed -= instance.OnClickLeft;
                @ClickLeft.canceled -= instance.OnClickLeft;
                @CrouchButton.started -= instance.OnCrouchButton;
                @CrouchButton.performed -= instance.OnCrouchButton;
                @CrouchButton.canceled -= instance.OnCrouchButton;
                @SelectNextUnit.started -= instance.OnSelectNextUnit;
                @SelectNextUnit.performed -= instance.OnSelectNextUnit;
                @SelectNextUnit.canceled -= instance.OnSelectNextUnit;
                @Invenory.started -= instance.OnInvenory;
                @Invenory.performed -= instance.OnInvenory;
                @Invenory.canceled -= instance.OnInvenory;
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
            }

            public void RemoveCallbacks(IMainMapActions instance)
            {
                if (m_Wrapper.m_MainMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainMapActions instance)
            {
                foreach (var item in m_Wrapper.m_MainMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainMapActions @MainMap => new MainMapActions(this);

        // CameraMap
        private readonly InputActionMap m_CameraMap;
        private List<ICameraMapActions> m_CameraMapActionsCallbackInterfaces = new List<ICameraMapActions>();
        private readonly InputAction m_CameraMap_CameraContol;
        private readonly InputAction m_CameraMap_CameraRotate;
        private readonly InputAction m_CameraMap_Zoom;
        private readonly InputAction m_CameraMap_ZoomOut;
        private readonly InputAction m_CameraMap_CameraRotateRight;
        private readonly InputAction m_CameraMap_CameraRotateLeft;
        public struct CameraMapActions
        {
            private @MainInput m_Wrapper;
            public CameraMapActions(@MainInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @CameraContol => m_Wrapper.m_CameraMap_CameraContol;
            public InputAction @CameraRotate => m_Wrapper.m_CameraMap_CameraRotate;
            public InputAction @Zoom => m_Wrapper.m_CameraMap_Zoom;
            public InputAction @ZoomOut => m_Wrapper.m_CameraMap_ZoomOut;
            public InputAction @CameraRotateRight => m_Wrapper.m_CameraMap_CameraRotateRight;
            public InputAction @CameraRotateLeft => m_Wrapper.m_CameraMap_CameraRotateLeft;
            public InputActionMap Get() { return m_Wrapper.m_CameraMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraMapActions set) { return set.Get(); }
            public void AddCallbacks(ICameraMapActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraMapActionsCallbackInterfaces.Add(instance);
                @CameraContol.started += instance.OnCameraContol;
                @CameraContol.performed += instance.OnCameraContol;
                @CameraContol.canceled += instance.OnCameraContol;
                @CameraRotate.started += instance.OnCameraRotate;
                @CameraRotate.performed += instance.OnCameraRotate;
                @CameraRotate.canceled += instance.OnCameraRotate;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @ZoomOut.started += instance.OnZoomOut;
                @ZoomOut.performed += instance.OnZoomOut;
                @ZoomOut.canceled += instance.OnZoomOut;
                @CameraRotateRight.started += instance.OnCameraRotateRight;
                @CameraRotateRight.performed += instance.OnCameraRotateRight;
                @CameraRotateRight.canceled += instance.OnCameraRotateRight;
                @CameraRotateLeft.started += instance.OnCameraRotateLeft;
                @CameraRotateLeft.performed += instance.OnCameraRotateLeft;
                @CameraRotateLeft.canceled += instance.OnCameraRotateLeft;
            }

            private void UnregisterCallbacks(ICameraMapActions instance)
            {
                @CameraContol.started -= instance.OnCameraContol;
                @CameraContol.performed -= instance.OnCameraContol;
                @CameraContol.canceled -= instance.OnCameraContol;
                @CameraRotate.started -= instance.OnCameraRotate;
                @CameraRotate.performed -= instance.OnCameraRotate;
                @CameraRotate.canceled -= instance.OnCameraRotate;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
                @ZoomOut.started -= instance.OnZoomOut;
                @ZoomOut.performed -= instance.OnZoomOut;
                @ZoomOut.canceled -= instance.OnZoomOut;
                @CameraRotateRight.started -= instance.OnCameraRotateRight;
                @CameraRotateRight.performed -= instance.OnCameraRotateRight;
                @CameraRotateRight.canceled -= instance.OnCameraRotateRight;
                @CameraRotateLeft.started -= instance.OnCameraRotateLeft;
                @CameraRotateLeft.performed -= instance.OnCameraRotateLeft;
                @CameraRotateLeft.canceled -= instance.OnCameraRotateLeft;
            }

            public void RemoveCallbacks(ICameraMapActions instance)
            {
                if (m_Wrapper.m_CameraMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraMapActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraMapActions @CameraMap => new CameraMapActions(this);
        private int m_MainSchemeIndex = -1;
        public InputControlScheme MainScheme
        {
            get
            {
                if (m_MainSchemeIndex == -1) m_MainSchemeIndex = asset.FindControlSchemeIndex("Main");
                return asset.controlSchemes[m_MainSchemeIndex];
            }
        }
        public interface IMainMapActions
        {
            void OnClickLeft(InputAction.CallbackContext context);
            void OnCrouchButton(InputAction.CallbackContext context);
            void OnSelectNextUnit(InputAction.CallbackContext context);
            void OnInvenory(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
        }
        public interface ICameraMapActions
        {
            void OnCameraContol(InputAction.CallbackContext context);
            void OnCameraRotate(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnZoomOut(InputAction.CallbackContext context);
            void OnCameraRotateRight(InputAction.CallbackContext context);
            void OnCameraRotateLeft(InputAction.CallbackContext context);
        }
    }
}
